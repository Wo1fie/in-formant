FROM ubuntu:20.04 AS build

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -y && \
        apt-get install -y \
            wget \
            make \
            autoconf \
            gcc-10 \
            g++-10 \
            gcc-mingw-w64-i686 \
            g++-mingw-w64-i686 \
            gfortran-mingw-w64-i686 \
            mingw-w64-tools

RUN ln -s /usr/bin/gcc-10 /usr/bin/gcc && \
        ln -s /usr/bin/g++-10 /usr/bin/g++

RUN mkdir /dockerbuild
WORKDIR /dockerbuild

# Install cmake
ENV ver=3.19.3
RUN wget https://github.com/Kitware/CMake/releases/download/v$ver/cmake-$ver-Linux-x86_64.sh && \
        sh cmake-$ver-Linux-x86_64.sh --skip-license --prefix=/usr/local

ENV HOST i686-w64-mingw32

ENV PKG_CONFIG /usr/bin/$HOST-pkg-config
ENV PKG_CONFIG_SYSROOT_DIR /
ENV PKG_CONFIG_LIBDIR /usr/$HOST/lib/pkgconfig:/usr/$HOST/share/pkgconfig
ENV PKG_CONFIG_SYSTEM_INCLUDE_PATH /usr/$HOST/include
ENV PKG_CONFIG_SYSTEM_LIBRARY_PATH /usr/$HOST/lib

ENV CC /usr/bin/$HOST-gcc-posix
ENV CXX /usr/bin/$HOST-g++-posix
ENV AR /usr/bin/$HOST-gcc-ar-posix
ENV RANLIB /usr/bin/$HOST-gcc-ranlib-posix
ENV NM /usr/bin/$HOST-gcc-nm-posix
ENV RC /usr/bin/$HOST-windres

ENV ver=5.12.10
RUN wget https://download.qt.io/official_releases/qt/5.12/$ver/submodules/qtbase-everywhere-src-$ver.tar.xz && \
        tar -xvf qtbase-everywhere-src-$ver.tar.xz
RUN mkdir qtbase-build && \
        cd qtbase-build && \
        ../qtbase-everywhere-src-$ver/configure \
            -opensource \
            -confirm-license \
            -xplatform win32-g++ \
            -device-option CROSS_COMPILE=$HOST- \
            -device-option PKG_CONFIG='$HOST-pkg-config' \
            -release \
            -shared \
            -prefix /usr/$HOST/qt5 \
            -opengl dynamic

ENV ver=1.2.11
RUN wget https://zlib.net/zlib-$ver.tar.xz && \
        tar -xvf zlib-$ver.tar.xz
RUN cd zlib-$ver && \
        mkdir objs && \
        cd objs && \
        sed -i \
            -e 's/\(cp $(STATICLIB) $(DESTDIR)$(libdir)\)/[ -z ''$(STATICLIB)'' ] || \1/g' \
            -e 's/\(cp $(SHAREDLIBV) $(DESTDIR)$(sharedlibdir);\)/[ -z ''$(SHAREDLIBV)'' ] || \1/g' \
            ../Makefile.in && \
        CHOST=$HOST \
        make -C .. -f win32/Makefile.gcc \
            SHARED_MODE=1 \
            BINARY_PATH=/usr/$HOST/bin \
            INCLUDE_PATH=/usr/$HOST/include \
            LIBRARY_PATH=/usr/$HOST/lib \
            PREFIX=$HOST- \
            -j$(nproc) install

ENV ver=1.1.1i
RUN wget https://www.openssl.org/source/openssl-$ver.tar.gz && \
        tar -xvf openssl-$ver.tar.gz
RUN cd openssl-$ver && \
        mkdir objs && \
        cd objs && \
        ../Configure mingw zlib shared no-capieng --prefix=/usr/$HOST && \
        make all -j$(nproc) && \
        make install_sw 

ENV ver=2.2.10
RUN wget https://downloads.sourceforge.net/project/expat/expat/$ver/expat-$ver.tar.bz2 && \
        tar -xvf expat-$ver.tar.bz2
RUN cd expat-$ver && \
        mkdir objs && \
        cd objs && \
        ../configure --host=$HOST --prefix=/usr/$HOST --enable-shared --disable-static \
            --without-docbook && \
        make -j$(nproc) && \
        make install

ENV ver=1.12.20
RUN wget https://dbus.freedesktop.org/releases/dbus/dbus-$ver.tar.gz && \
        tar -xvf dbus-$ver.tar.gz
RUN cd dbus-$ver && \
        mkdir objs && \
        cd objs && \
        ../configure --host=$HOST --prefix=/usr/$HOST --enable-shared --disable-static \
            --disable-tests --disable-verbose-mode --disable-asserts --disable-maintainer-mode \
            --disable-silent-rules --disable-launchd --disable-doxygen-docs --disable-xml-docs \
            CFLAGS="-DPROCESS_QUERY_LIMITED_INFORMATION=0x1000" && \
        make -j$(nproc) && \
        make install

RUN cd qtbase-build && \
        OPENSSL_LIBS="`$HOST-pkg-config --libs-only-l openssl`" \
        ../qtbase-everywhere-src-5.12.10/configure \
            -opensource \
            -confirm-license \
            -xplatform win32-g++ \
            -device-option CROSS_COMPILE=$HOST- \
            -device-option PKG_CONFIG='$HOST-pkg-config' \
            -pkg-config \
            -force-pkg-config \
            -no-use-gold-linker \
            -release \
            -shared \
            -prefix /usr/$HOST/qt5 \
            -no-icu \
            -opengl desktop \
            -no-glib \
            -accessibility \
            -nomake examples \
            -nomake tests \
            -qt-zlib \
            -qt-libpng \
            -qt-libjpeg \
            -qt-freetype \
            -qt-harfbuzz \
            -qt-pcre \
            -openssl-linked \
            -no-dbus \
            -no-pch \
            -no-feature-concurrent \
            -no-feature-network \
            -no-feature-sql \
            -no-feature-testlib \
            -no-feature-xml && \
        make -j$(nproc) && \
        make install

RUN apt-get update -y && apt-get install -y python

ENV ver=5.12.10
RUN wget https://download.qt.io/official_releases/qt/5.12/$ver/submodules/qtdeclarative-everywhere-src-$ver.tar.xz && \
        tar -xvf qtdeclarative-everywhere-src-$ver.tar.xz
RUN cd qtdeclarative-everywhere-src-$ver && \
        /usr/$HOST/qt5/bin/qmake && \ 
        make -j$(nproc) && \
        make install

ENV ver=5.12.10
RUN wget https://download.qt.io/official_releases/qt/5.12/$ver/submodules/qtquickcontrols2-everywhere-src-$ver.tar.xz && \
        tar -xvf qtquickcontrols2-everywhere-src-$ver.tar.xz
RUN cd qtquickcontrols2-everywhere-src-$ver && \
        /usr/$HOST/qt5/bin/qmake && \
        make -j$(nproc) && \
        make install

ENV ver=8.0.0
RUN wget https://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$ver.tar.bz2 && \
        tar -xvf mingw-w64-v$ver.tar.bz2
RUN cd mingw-w64-v$ver && \
        mkdir headers-build && \
        cd headers-build && \
        ../mingw-w64-headers/configure --host=$HOST --prefix=/usr/$HOST --with-default-msvcrt=msvcrt --enable-sdk=all --enable-idl && \
        make install
RUN cd mingw-w64-v$ver && \
        mkdir crt-build && \
        cd crt-build && \
        ../mingw-w64-crt/configure --host=$HOST --prefix=/usr/$HOST --with-default-msvcrt=msvcrt && \
        make -j$(nproc) && \
        make install
RUN cd mingw-w64-v$ver && \
        mkdir libraries-winpthreads-build && \
        cd libraries-winpthreads-build && \
        ../mingw-w64-libraries/winpthreads/configure --host=$HOST --prefix=/usr/$HOST && \
        make -j$(nproc) && \
        make install

# Build portaudio
RUN wget http://www.portaudio.com/archives/pa_stable_v190600_20161030.tgz && \
        tar -xvf pa_stable_v190600_20161030.tgz
RUN cd portaudio && \
        sed -i 's/-I\\$(top_srcdir)\/src\/hostapi\/wasapi\/mingw-include//g' configure.in && \
        sed -i \
            -e 's/\((_MSC_VER >= 1400)\)/\1 || defined(__MINGW64_VERSION_MAJOR)/g' \
            -e 's/Avrt.h/avrt.h/g' \
            -e 's/Audioclient.h/audioclient.h/g' \
            -e 's/\(<mmdeviceapi.h>\)/\1\n#include <functiondiscoverykeys_devpkey.h>/g' \
            src/hostapi/wasapi/pa_win_wasapi.c && \
        autoconf && \
        mkdir objs && \
        cd objs && \
        ../configure --host=$HOST --prefix=/usr/$HOST --enable-shared --disable-static --with-host_os=mingw --with-winapi=wmme,directx,wasapi,wdmks && \
        make -j$(nproc) && \
        make install

# Build fftw3
ENV ver=3.3.9
RUN wget http://www.fftw.org/fftw-$ver.tar.gz && \
        tar -xvf fftw-$ver.tar.gz
RUN cd fftw-$ver && \
        mkdir build && \
        cd build && \
        ../configure --host=$HOST --prefix=/usr/$HOST --enable-shared --disable-static && \
        make -j$(nproc) && \
        make install

ENV ver=2.2.0
RUN wget https://downloads.sourceforge.net/project/glew/glew/$ver/glew-$ver.tgz && \
        tar -xvf glew-$ver.tgz
RUN cd glew-$ver && \
        make GLEW_DEST=/usr/$HOST install.include && \
        cp src/glew.c /usr/$HOST

RUN ln -sf /usr/bin/$HOST-gcc-posix /usr/bin/$HOST-gcc && \
        ln -sf /usr/bin/$HOST-g++-posix /usr/bin/$HOST-g++

COPY win32-toolchain.cmake /usr/win32-toolchain.cmake

# Build eigen3
ENV ver=3.3.9
RUN wget https://gitlab.com/libeigen/eigen/-/archive/$ver/eigen-$ver.tar.gz && \
        tar -xvf eigen-$ver.tar.gz
RUN cd eigen-$ver && \
        mkdir build && \
        cd build && \
        cmake -DCMAKE_TOOLCHAIN_FILE=/usr/win32-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/$HOST .. && \
        make -j$(nproc) && \
        make install 

RUN apt-get update -y && apt-get install -y git zip

RUN git clone -b v1.2.0 https://github.com/trailofbits/pe-parse
RUN cd pe-parse && \
        CC= CXX= cmake . -DCMAKE_INSTALL_PREFIX=/usr && \
        make -j$(nproc) && \
        make install

ENV ver=5.12.10
RUN wget https://download.qt.io/official_releases/qt/5.12/$ver/submodules/qttools-everywhere-src-$ver.tar.xz && \
        tar -xvf qttools-everywhere-src-$ver.tar.xz
COPY windeployqt/utils.cpp qttools-everywhere-src-$ver/src/shared/winutils/utils.cpp
COPY windeployqt/read_pe_linux.cpp qttools-everywhere-src-$ver/src/shared/winutils/read_pe_linux.cpp
COPY windeployqt/windeployqt.pro qttools-everywhere-src-$ver/src/windeployqt/windeployqt.pro
COPY windeployqt/main.cpp qttools-everywhere-src-$ver/src/windeployqt/main.cpp
RUN cd qttools-everywhere-src-$ver/src/windeployqt && \
        /usr/$HOST/qt5/bin/qmake && \
        make -j$(nproc) && \
        make install

CMD cd /build && \
        cmake \
            -DCMAKE_TOOLCHAIN_FILE=/usr/win32-toolchain.cmake \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            /src && \
        make -j$(nproc) && \
        /src/docker/deploy-windows.sh


